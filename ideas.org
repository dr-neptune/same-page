* <2025-01-07 Tue>

- testing new emacs config on permutation.
- next step should be to persist the persistence layer. I'm wondering
  if it might be beneficial to switch from H2 to sqlite
  - talked it through with yip. Will stick with H2 since it seems to
    be a standard with java projects and offers similar syntax to
    postgres.
  - update: persistence persisted.

I think some of the lack of movement on this is because I don't really
know what I'm trying to achieve.

it would be good to store user logins with cookies or similar.

adding honeysql for now. The idea of building up a sql query
dynamically using pipes is enticing.
- update honeysql added.

next step: let's add more functionality. I think now is a good time to
explore a minimal domain model and do some db modeling with yip
  
* <2024-12-24 Tue>

- add formatting / linting [done]

maybe start building a proper domain model
- write up initial thoughts
- clarify and expand them

- use a database migration tool
- maybe look into honeysql and malli?
  - honeysql seems like a good idea
  - malli might be a bit early for now, let's see what the domain
    model looks like first

    maybe add a nice scheduling system in it for reminders and
    whatnot. A cool little use case would be to also make a
    plant-daddy app that takes care of various plant needs.

    update <2025-01-07 Tue>: Kelsey already has an app that looks great for this. 


* <2024-12-23 Mon>

Next steps:
- stop making a new database every time. It would be better to use a
  proper db migration tool

- Maybe use something for managing SQL?

- Make a users table that stores information about a user and have it
  join to notes

- add user spaces where a user can make projects which have notes

- maybe try using postgres or something instead of H2?

- figure out some neat things that can be done in htmx that aren't as
  simple in react

- maybe simple auth? So the user can't see / access other notes and whatnot

* <2024-12-22 Sun>
Next steps:

- get a proper backend model working
  - maybe to start we can just store a bunch in a row

- set up a small local database
- enable edits in small chunks using HTMX
  - since we have this feature, we can maybe make a very dynamic built
    up collage of sorts for a layout

- Add real-time collaboration with web-sockets

- add session handling and user management

- handle conflicts for simultaneous updates

- add a proper database. Maybe use more docker compose

- add more advanced text editing

- add user A updated at notification
